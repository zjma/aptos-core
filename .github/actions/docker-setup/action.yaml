name: "Docker build setup"
description: |
  Runs an opinionated and unified docker build setup action. It does the following:
  * Logs in to docker image registries (AWS ECR and GCP GAR)
  * Setup for buildx and other dependencies (crane)
  * Sets git credentials for private builds
inputs:
  # GCP auth
  GCP_WORKLOAD_IDENTITY_PROVIDER:
    required: true
    description: "GCP Workload Identity provider"
  GCP_SERVICE_ACCOUNT_EMAIL:
    required: true
    description: "GCP service account email"
  EXPORT_GCP_PROJECT_VARIABLES:
    required: false
    description: "Whether to export GCP credentials to the environment. Useful for running gcloud commands"
    default: "true"
  # AWS auth
  AWS_ACCESS_KEY_ID:
    required: true
    description: "AWS access key id"
  AWS_SECRET_ACCESS_KEY:
    required: true
    description: "AWS secret access key"
  AWS_DOCKER_ARTIFACT_REPO:
    required: true
    description: "AWS ECR repo to authenticate to"
  # Optional git auth
  GIT_CREDENTIALS:
    description: "Optional credentials to pass to git. Useful if you need to pull private repos for dependencies"
    required: false
  GCP_AUTH_DURATION:
    description: "Duration of GCP auth token in seconds"
    type: int
    # setting this to 1.5h since sometimes docker builds (special performance
    # builds etc.) take that long. Default is 1h.
    default: 5400
outputs:
  CLOUDSDK_AUTH_ACCESS_TOKEN:
    description: "GCP access token"
    value: ${{ steps.auth.outputs.access_token }}

runs:
  using: composite
  steps:
    - name: setup docker context for buildx
      id: buildx-context
      shell: bash
      run: docker context create builders

    - name: setup docker buildx
      uses: aptos-labs/setup-buildx-action@7952e9cf0debaf1f3f3e5dc7d9c5ea6ececb127e # pin v2.4.0
      with:
        endpoint: builders
        version: v0.11.0
        custom-name: "core-builder"
        keep-state: true
        config-inline: |
          [worker.oci]
            gc = true
            gckeepstorage = 900000000000 # Use 900GB out of 1TB for builder storage
            [[worker.oci.gcpolicy]]
              keepBytes = 700000000000 # Use 700GB out of 900GB for cache storage
              keepDuration = 604800 # Keep cache for 7 days
              filters = [ "type==source.local", "type==exec.cachemount", "type==source.git.checkout"]
            [[worker.oci.gcpolicy]]
              all = true
              keepBytes = 900000000000

    - uses: imjasonh/setup-crane@00c9e93efa4e1138c9a7a5c594acd6c75a2fbf0c # pin@v0.3
      with:
        version: v0.15.2

    - id: auth
      name: "Authenticate to Google Cloud"
      uses: "google-github-actions/auth@dac4e13deb3640f22e3ffe758fd3f95e6e89f712" # pin@v0
      with:
        create_credentials_file: false
        token_format: "access_token"
        access_token_lifetime: ${{ inputs.GCP_AUTH_DURATION }}
        workload_identity_provider: ${{ inputs.GCP_WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ inputs.GCP_SERVICE_ACCOUNT_EMAIL }}
        export_environment_variables: ${{ inputs.EXPORT_GCP_PROJECT_VARIABLES }}

    - name: Login to us-west1 Google Artifact Registry
      uses: docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b # pin@v2
      with:
        registry: us-west1-docker.pkg.dev
        username: oauth2accesstoken
        password: ${{ steps.auth.outputs.access_token }}

    - name: Login to US multi-region Google Artifact Registry
      uses: docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b # pin@v2
      with:
        registry: us-docker.pkg.dev
        username: oauth2accesstoken
        password: ${{ steps.auth.outputs.access_token }}

    - name: Login to ECR
      uses: docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b # pin@v2
      with:
        registry: ${{ inputs.AWS_DOCKER_ARTIFACT_REPO }}
        username: ${{ inputs.AWS_ACCESS_KEY_ID }}
        password: ${{ inputs.AWS_SECRET_ACCESS_KEY }}

    - name: Setup git credentials
      if: inputs.GIT_CREDENTIALS != ''
      shell: bash
      run: |
        git config --global credential.helper store
        echo "${{ inputs.GIT_CREDENTIALS }}" > ~/.git-credentials
